name: simulation
root: ./
startup_window: status
pre_window: export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_NAME=simulation; export SENSORS="garmin_down, realsense_front"
windows:
  - roscore:
      layout: tiled
      panes:
        - roscore
        - waitForRos; roslaunch rosbridge_server rosbridge_websocket.launch
  - gazebo:
      layout: tiled
      panes:
        - waitForRos; roslaunch mrs_simulation simulation.launch world_name:=grass_plane gui:=true
  - status:
      layout: tiled
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch
  - spawn:
      layout: tiled
      panes:
        - waitForSimulation; rosservice call /mrs_drone_spawner/spawn "1 $UAV_TYPE --pos_file `pwd`/init_pose.yaml --enable-rangefinder"
  - control:
      layout: tiled
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch
  - automatic_start:
      layout: tiled
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
  - takeoff:
      layout: tiled
      panes:
        # #{ uav1
        - 'export UAV_NAME=uav1;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          sleep 2;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
  - landmarkDet:
      layout: tiled
      panes:
 
        - export UAV_NAME=uav1; waitForSimulation;  roslaunch body_movement_swarming LandmarkDetection.launch

  - tempgest:
    layout: tiled
    panes:
      -  export UAV_NAME=uav1; waitForRos;roslaunch body_movement_swarming tempaction.launch

  - gestCon:
    layout: tiled
    panes: 
        - export UAV_NAME=uav1; waitForSimulation;  roslaunch body_movement_swarming gesturecontroller.launch

  - trigCon:
    layout: tiled
    panes: 
        - export UAV_NAME=uav1; waitForSimulation; history -s rosservice call /'"$UAV_NAME"'/start_action_movement

  - republish:
    layout: tiled
    panes: 
        - export UAV_NAME=uav1; waitForSimulation; rosrun image_transport republish raw in:=$UAV_NAME/mediapipe/image_raw compressed out:=$UAV_NAME/mediapipe/image_raw/

  - goto:
      layout: tiled
      synchronize: after
      panes:
        - 'export UAV_NAME=uav1;
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[10.0, 0.0, 3.0, 0.0\]\";
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[-10.0, 0.0, 3.0, 0.0\]\"'
        - 'export UAV_NAME=uav2;
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[-10.0, 0.0, 3.0, 0.0\]\";
          history -s rosservice call /$UAV_NAME/control_manager/goto \"goal: \[10.0, 0.0, 3.0, 0.0\]\"'
  # - gazebo_camera_follow:
  #     layout: tiled
  #     panesleep 1; pwd >> /tmp/tmux_restore_path.txt; tmux list-panes -s -F "#{pane_pid} #{pane_current_command}" | grep -v tmux | awk '{print $1}' | while read in; do killp $in; done
  #     exit
  #     
  #       - waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1
